<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-03-06 Sun 15:15 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Justin" />
<link rel="stylesheet" type="text/css" href="/css/worg.css"/>
<link rel="icon" type="image/png" href="/img/icons/heckert.png">
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="index.html"> UP </a>
 |
 <a accesskey="H" href="../index.html"> HOME </a>
</div><div id="content">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orge99e004">Chapter 2 序列构成的数组</a>
<ul>
<li><a href="#orge25cd3e">列表</a>
<ul>
<li><a href="#org4d8d73f">分类</a></li>
<li><a href="#orgd4b0260">列表推导</a></li>
</ul>
</li>
<li><a href="#org321fd2e">元组(tuple)</a>
<ul>
<li><a href="#orgcb0a3a2">元组拆包或可迭代元素拆包（Iterable Unpacking）</a></li>
<li><a href="#orgd911e81">namedtuple</a></li>
<li><a href="#org7ef7c3d">作为不可变列表</a></li>
</ul>
</li>
<li><a href="#org17e20df">切片</a>
<ul>
<li><a href="#org9a90716">对序列使用 + 和 *</a></li>
<li><a href="#org924aabc">序列的增量赋值</a></li>
<li><a href="#orgf096916">bisect</a></li>
</ul>
</li>
<li><a href="#org56a0053">当列表不再是首选</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-orge99e004" class="outline-2">
<h2 id="orge99e004">Chapter 2 序列构成的数组</h2>
<div class="outline-text-2" id="text-orge99e004">
</div>
<div id="outline-container-orge25cd3e" class="outline-3">
<h3 id="orge25cd3e">列表</h3>
<div class="outline-text-3" id="text-orge25cd3e">
</div>
<div id="outline-container-org4d8d73f" class="outline-4">
<h4 id="org4d8d73f">分类</h4>
<div class="outline-text-4" id="text-org4d8d73f">
<p>
从存放的数据类型可以分为：
</p>

<ul class="org-ul">
<li>容器序列（container sequence），如： <code>list</code> 、 <code>tuple</code> 、 <code>collections.deque</code> ，可以存放不同类型数据的*引用*。</li>
<li>扁平序列（flat sequence），如： <code>str</code> 、 <code>bytes</code> 、 <code>bytearray</code> 、 <code>memoryview</code> 和  <code>array.array</code> , 只能容纳字符、字节和数值这种基础类型。扁平序列是一段连续的内存空间，更加紧凑。</li>
</ul>

<p>
从是否可变可以分为：
</p>

<ul class="org-ul">
<li>可变序列，如： <code>list</code> 、 <code>bytearray</code> 、 <code>array.array</code> 、 <code>collections.deque</code> 和 <code>memoryview</code> 。</li>
<li>不可变序列，如： <code>tuple</code> 、 <code>str</code> 和 <code>bytes</code> 。</li>
</ul>
</div>
</div>

<div id="outline-container-orgd4b0260" class="outline-4">
<h4 id="orgd4b0260">列表推导</h4>
<div class="outline-text-4" id="text-orgd4b0260">
<p>
通常的原则是，列表推导只用来创建新的列表，并保持简短，尽量避免滥用，如通过列表推导重复获取列表的副作用。
</p>

<p>
*列表推导不会再有变量泄漏的问题*，在 <code>Python 2.x</code> 中，列表推导 <code>for</code> 关键字之后的赋值可能会影响上下文中的同名变量
</p>

<div class="org-src-container">
<pre class="src src-python">&gt;&gt;&gt; <span style="color: #0AAEB3;">x</span> = <span style="color: #98BC37;">'my precious'</span>
&gt;&gt;&gt; <span style="color: #0AAEB3;">dummy</span> = <span style="color: #FCE8C3;">[</span>x <span style="color: #EF2F27;">for</span> x <span style="color: #EF2F27;">in</span> <span style="color: #98BC37;">'ABC'</span><span style="color: #FCE8C3;">]</span>
&gt;&gt;&gt; x
<span style="color: #98BC37;">'C'</span>
</pre>
</div>

<p>
但在 <code>Python 3</code> 中列表推导有了自己的局部作用域，不会影响上下文的赋值。
</p>
</div>
</div>
</div>

<div id="outline-container-org321fd2e" class="outline-3">
<h3 id="org321fd2e">元组(tuple)</h3>
<div class="outline-text-3" id="text-org321fd2e">
</div>
<div id="outline-container-orgcb0a3a2" class="outline-4">
<h4 id="orgcb0a3a2">元组拆包或可迭代元素拆包（Iterable Unpacking）</h4>
<div class="outline-text-4" id="text-orgcb0a3a2">
<ul class="org-ul">
<li>交换两个变量的值： <code>a, b = b, a</code></li>
<li>用 * 运算符把一个可迭代对象拆开作为函数的参数： <code>test(*a_tuple)</code></li>
<li>用*来处理剩下的元素： <code>a, b, *rest = range(5)</code></li>
</ul>
</div>
</div>

<div id="outline-container-orgd911e81" class="outline-4">
<h4 id="orgd911e81">namedtuple</h4>
<div class="outline-text-4" id="text-orgd911e81">
<p>
用 <code>namedtuple</code> 构建的类，内存消耗跟元组一样，比普通的对象实例消耗要小一些，常用方法or属性： <code>_fields</code> 、 <code>_make()</code> 、 <code>_asdict()</code> 。
</p>
</div>
</div>

<div id="outline-container-org7ef7c3d" class="outline-4">
<h4 id="org7ef7c3d">作为不可变列表</h4>
<div class="outline-text-4" id="text-org7ef7c3d">
<p>
除增减元素相关方法外，元素支持列表的其他所有方法，另外元组没有 <code>_reversed__</code> 方法，不过可以通过 <code>reverse(a_tup)</code> 替代。
</p>
</div>
</div>
</div>


<div id="outline-container-org17e20df" class="outline-3">
<h3 id="org17e20df">切片</h3>
<div class="outline-text-3" id="text-org17e20df">
<p>
如果赋值的对象是一个切片，那么赋值语句的右侧必须是个可迭代对象。即便只有单独 一个值，也要把它转换成可迭代的序列。
</p>
</div>

<div id="outline-container-org9a90716" class="outline-4">
<h4 id="org9a90716">对序列使用 + 和 *</h4>
<div class="outline-text-4" id="text-org9a90716">
<p>
对序列使用 + 和 *，都不会改变原有序列，而是重新创建新的序列。但如果序列中的元素是对象的引用，则需要注意下面这种情况：
</p>

<div class="org-src-container">
<pre class="src src-python">&gt;&gt;&gt; <span style="color: #0AAEB3;">weird_board</span> = <span style="color: #FCE8C3;">[</span><span style="color: #68A8E4;">[</span><span style="color: #98BC37;">'_'</span><span style="color: #68A8E4;">]</span> * 3<span style="color: #FCE8C3;">]</span> * 3
&gt;&gt;&gt; weird_board
<span style="color: #FCE8C3;">[</span><span style="color: #68A8E4;">[</span><span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span><span style="color: #68A8E4;">]</span>, <span style="color: #68A8E4;">[</span><span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span><span style="color: #68A8E4;">]</span>, <span style="color: #68A8E4;">[</span><span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span><span style="color: #68A8E4;">]</span><span style="color: #FCE8C3;">]</span>

&gt;&gt;&gt; weird_board<span style="color: #FCE8C3;">[</span>1<span style="color: #FCE8C3;">][</span>2<span style="color: #FCE8C3;">]</span> = <span style="color: #98BC37;">'O'</span>
&gt;&gt;&gt; weird_board
<span style="color: #FCE8C3;">[</span><span style="color: #68A8E4;">[</span><span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'O'</span><span style="color: #68A8E4;">]</span>, <span style="color: #68A8E4;">[</span><span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'O'</span><span style="color: #68A8E4;">]</span>, <span style="color: #68A8E4;">[</span><span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'_'</span>, <span style="color: #98BC37;">'O'</span><span style="color: #68A8E4;">]</span><span style="color: #FCE8C3;">]</span>
</pre>
</div>

<p>
<code>weird_board</code> 中的三个元素都是对同一个列表的引用，所以在赋值时，其实是在操作同一个列表，所以要通过每次创建新的列表来避免这种问题， <code>board = [['_'] * 3 for i in range(3)]</code> 。
</p>
</div>
</div>

<div id="outline-container-org924aabc" class="outline-4">
<h4 id="org924aabc">序列的增量赋值</h4>
<div class="outline-text-4" id="text-org924aabc">
<p>
增量赋值运算符 += 和 *= 的表现取决于它们的第一个操作对象。
</p>

<ul class="org-ul">
<li>+= 背后的特殊方法是 <code>__iadd__</code> (用于“就地加法”)，会赋值给原对象，没有 <code>__iadd__</code> 方法会退一步调用 <code>__add__</code> 方法，会产生一个新的对象，并把结果赋值给新对象。</li>
<li>*= 作用在可变序列上时会在原序列上追加新元素；作用在不可变序列上时，每次都会产生新对象，效率极低。</li>
</ul>

<p>
<code>str</code> 是一个例外，因为对字符串做 += 实在是太普遍了，所以 CPython 对它做了优化。为 str 初始化内存的时候，程序会为它留出额外的可扩展空间，因此进行增量操作的时候，并不会涉及复制原有字符串到新位置这类操作。
</p>

<p>
<b>一个关于+=的谜题</b>
</p>

<div class="org-src-container">
<pre class="src src-python">&gt;&gt;&gt; <span style="color: #0AAEB3;">t</span> = <span style="color: #FCE8C3;">(</span>1, 2, <span style="color: #68A8E4;">[</span>30, 40<span style="color: #68A8E4;">]</span><span style="color: #FCE8C3;">)</span>
&gt;&gt;&gt; <span style="color: #0AAEB3;">t</span><span style="color: #FCE8C3;">[</span>2<span style="color: #FCE8C3;">]</span> += <span style="color: #FCE8C3;">[</span>50, 60<span style="color: #FCE8C3;">]</span>
Traceback <span style="color: #FCE8C3;">(</span>most recent call last<span style="color: #FCE8C3;">)</span>:
  File <span style="color: #98BC37;">"&lt;stdin&gt;"</span>, line 1, <span style="color: #EF2F27;">in</span> &lt;module&gt;
<span style="color: #68A8E4;">TypeError</span>: <span style="color: #98BC37;">'tuple'</span> <span style="color: #2C78BF;">object</span> does <span style="color: #EF2F27;">not</span> support item assignment
&gt;&gt;&gt; t
<span style="color: #FCE8C3;">(</span>1, 2, <span style="color: #68A8E4;">[</span>30, 40, 50, 60<span style="color: #68A8E4;">]</span><span style="color: #FCE8C3;">)</span>
</pre>
</div>

<p>
由于 <code>t[2]</code> 是可变的，所以列表元素正常追加，但将结果赋值给 <code>t[2]</code> 就会报错，因为t是元素，不可变。
</p>

<p>
所以：
</p>

<ul class="org-ul">
<li>不要把可变对象放在元组里面</li>
<li>增量赋值不是一个原子操作</li>
</ul>
</div>
</div>

<div id="outline-container-orgf096916" class="outline-4">
<h4 id="orgf096916">bisect</h4>
<div class="outline-text-4" id="text-orgf096916">
<p>
根据分数，找到对应传成绩等级
</p>

<div class="org-src-container">
<pre class="src src-python">
<span style="color: #EF2F27;">def</span> <span style="color: #FBB829;">grade</span><span style="color: #FCE8C3;">(</span>score, breakpoints=<span style="color: #68A8E4;">[</span>60, 70, 80, 90<span style="color: #68A8E4;">]</span>, grades=<span style="color: #98BC37;">'FDCBA'</span><span style="color: #FCE8C3;">)</span>:
    <span style="color: #0AAEB3;">i</span> = bisect.bisect<span style="color: #FCE8C3;">(</span>breakpoints, score<span style="color: #FCE8C3;">)</span>
    <span style="color: #EF2F27;">return</span> grades<span style="color: #FCE8C3;">[</span>i<span style="color: #FCE8C3;">]</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org56a0053" class="outline-3">
<h3 id="org56a0053">当列表不再是首选</h3>
<div class="outline-text-3" id="text-org56a0053">
<ul class="org-ul">
<li>只处理数字列表时， <code>array.array</code> 比 <code>list</code> 更高效</li>
<li>memoryview 是一个内置类，它能让用户在不复制内容的情况下操作同一个数组的不同切片</li>
<li>collections.deque 类(双向队列)是一个线程安全、可以快速从两端添加或者删除元素的数据类型
<ul class="org-ul">
<li>queue</li>
<li>multiprocessing</li>
<li>asyncio</li>
<li>heapq</li>
</ul></li>
</ul>
</div>
</div>
</div>
</div>
</body>
</html>

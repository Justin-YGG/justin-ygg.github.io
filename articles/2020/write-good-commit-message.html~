<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-03-06 Sun 15:19 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>好好吃饭，好好 commit</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Justin" />
<link rel="stylesheet" type="text/css" href="/css/worg.css"/>
<link rel="icon" type="image/png" href="/img/icons/heckert.png">
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="index.html"> UP </a>
 |
 <a accesskey="H" href="../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">好好吃饭，好好 commit</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org8bb2619">为什么要好好写 commit message？</a></li>
<li><a href="#orgcefc1ea">如何写出好的 commit message？</a>
<ul>
<li><a href="#org93cd064">格式</a></li>
<li><a href="#orgfb7635a">注意事项</a></li>
</ul>
</li>
<li><a href="#org9140f39">哪有时间写那么详细的 commit message，还干活吗？</a></li>
<li><a href="#org82edb0d">reference</a></li>
</ul>
</div>
</div>
<p>
我在新介入一个项目的时候，一般会习惯 <code>tig</code> (一款优秀的 git 命令行可视化工具) 一下，浏览一下项目最近活跃的提交，去大体了解一下
这个项目最近在干什么事情，解决了哪些问题。如果项目中的 commit message 写的规范清晰，风格统一的话，我们就可以直观的感受到每次提交都
干了哪些事儿。但有时候，如果团队没有一个统一且严格的准则来指导编写 commit message，我们可能会看到很多非常简略的 commit message，如 <code>fix</code> 、
<code>fix bug</code> 、 <code>update</code> 、 <code>修复订单bug</code> 等, 这种无法准确传达意图的描述，往往会在问题排查，代码阅读等场景下给我们造成困扰，所以，编写规范统一的 commit message 其实是非常重要的，而很多时候这一点往往被忽视了。
</p>

<div id="outline-container-org8bb2619" class="outline-2">
<h2 id="org8bb2619">为什么要好好写 commit message？</h2>
<div class="outline-text-2" id="text-org8bb2619">
<p>
任何一个项目或者软件都是需要协作的项目，最少也会包含两个开发者：原作者和“几周或者几个月之后的原作者”，或许下面的场景在你身上也发生过，排查问题或者优化代码时，发现代码写的很垃圾，刚要骂*的时候【脾气急的同学可能已经骂完了（逃&#x2026;】，一查提交历史发现是自己过去一段时间所写的。所以，协作过程中写好 commit  message，基于以下几点原因:
</p>

<ul class="org-ul">
<li>更好的表达代码意图</li>
<li>加速 code review 速度</li>
<li>基于一定准侧的情况下，可以快速筛选特定的 commit message</li>
<li>帮助新同学或者未来的自己，快速建立上下文</li>
</ul>
</div>
</div>

<div id="outline-container-orgcefc1ea" class="outline-2">
<h2 id="orgcefc1ea">如何写出好的 commit message？</h2>
<div class="outline-text-2" id="text-orgcefc1ea">
<p>
一条好的 commit message  需要回答三个问题：
</p>

<ul class="org-ul">
<li>提交为何是必要的？</li>
<li>是如何解决问题的（针对一些修复类的提交）</li>
<li>会产生哪些影响？</li>
</ul>
</div>

<div id="outline-container-org93cd064" class="outline-3">
<h3 id="org93cd064">格式</h3>
<div class="outline-text-3" id="text-org93cd064">
<p>
commit message 的格式我们可以参考业界比较优秀的一些例子，比如 AngularJS 的 Commit Message Guidelines
</p>


<div class="figure">
<p><img src=" ../../img/articles/2020/commit-message.png" alt="commit-message.png" width="400" />
</p>
</div>

<p>
整体格式为：
</p>
<pre class="example">
&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
// 空一行
&lt;body&gt;
// 空一行
&lt;footer&gt;
</pre>

<ul class="org-ul">
<li><code>type</code> (must): 上图中列出的类型比较通用，我们可以直接使用，同样也可以结合自己的业务，整合一些定制化的类型，补充进去。</li>
<li><code>scope</code> (建议must) : 范围上相对灵活，只需要表明本次提交影响的范围即可。</li>
<li><code>subject</code> (must): 主题编写对此次提交的总结性描述，不要超过50个字。以动词开头，使用祈使句，如使用 change sth，而不是changed sth; 不要使用标点符号结尾，因为这其实是标题。</li>
<li><code>body</code> ：与 subject 之间必须有空行隔开，每行最好不超过 72 个字, 避免自动换行影响美观。</li>
<li><code>footer</code> ：footer 一般用的比较少，主要用在一些不兼容的版本变动和关闭issue时。</li>
</ul>

<p>
给出一个截止到发文日，AngularJS最新的一次 commit 示例：
</p>

<pre class="example">
chore(ci): correctly compute `$DIST_TAG` in the `deploy-code` CI job

Previously, the `DIST_TAG` environment variable was failing to be
computed correctly in the `deploy-code` CI job, because it relied on the
non-existent `node` executable. It worked with the default executor
(which includes `node`), but not with the `cloud-sdk` executor used in
`deploy-code`, resulting in the following error:

```sh
./.circleci/env.sh: line 59: node: command not found
DIST_TAG=
```

You can see an example failure in the "Set up environment" step logs in
https://app.circleci.com/pipelines/github/angular/angular.js/
170/workflows/32fcacf9-c89b-4020-b3eb-15debe18bb67/jobs/1793

This commit fixes it by computing `$DIST_TAG` using unix tools (`cat`,
`grep`, `sed`) that _are_ available on the docker images of all
executors.

Closes #17067
</pre>
</div>
</div>


<div id="outline-container-orgfb7635a" class="outline-3">
<h3 id="orgfb7635a">注意事项</h3>
<div class="outline-text-3" id="text-orgfb7635a">
<ul class="org-ul">
<li>不要将不同的修改合并在一次 commit 中提交</li>
<li>适当折叠 commit，安装 <code>brew install nvie/tap/git-toolbelt</code> ，使用 <code>git fixup</code> ，替代 <code>git commit --amend</code></li>
<li>一些空行、空格的添加和修改，不要和代码混在一起提交</li>
<li>不要搞超大的提交，小步快跑，每次提交只完成一件事</li>
<li>需要制定一些所有成员都必须遵守的团队规则，保证整个项目风格统一</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org9140f39" class="outline-2">
<h2 id="org9140f39">哪有时间写那么详细的 commit message，还干活吗？</h2>
<div class="outline-text-2" id="text-org9140f39">
<p>
在项目的整个生命周期内，我们书写的每一个行代码都在构建项目的历史，而 commit message 在一定程度是历史的缩影，就像历史书籍中的目录，完整的历史脉络可以帮助后人更好的理解历史，代码亦是如此；我们在思考编写 commit message 的时候，其实更是一次自我检验的机会，书写过程中我们可以思考本次commit是 <b>否有一些可以优化的点</b> 、*是否有未完成的todo* 、*是否掺杂了无关的代码* 等。不要将编写清晰明确的 commit message 当做是一种负担，这是一名合作的协作者应该具备的能力，也应该是一个享受的过程。
</p>

<p>
<b>Enjoy it! Cause you are making history.</b> 
</p>
</div>
</div>

<div id="outline-container-org82edb0d" class="outline-2">
<h2 id="org82edb0d">reference</h2>
<div class="outline-text-2" id="text-org82edb0d">
<ul class="org-ul">
<li><a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits">https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></li>
</ul>
</div>
</div>
</div>
</body>
</html>
